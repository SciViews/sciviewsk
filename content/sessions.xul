<?xml version="1.0"?>
 <!-- ***** BEGIN LICENSE BLOCK *****
	Version: MPL 1.1/GPL 2.0/LGPL 2.1

	The contents of this file are subject to the Mozilla Public License
	Version 1.1 (the "License"); you may not use this file except in
	compliance with the License. You may obtain a copy of the License at
	http://www.mozilla.org/MPL/

	Software distributed under the License is distributed on an "AS IS"
	basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
	License for the specific language governing rights and limitations
	under the License.

	The Original Code is SciViews-K by Philippe Grosjean et al.

	Contributor(s):
	Kamil Barton

	Alternatively, the contents of this file may be used under the terms of
	either the GNU General Public License Version 2 or later (the "GPL"), or
	the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
	in which case the provisions of the GPL or the LGPL are applicable instead
	of those above. If you wish to allow use of your version of this file only
	under the terms of either the GPL or the LGPL, and not to allow others to
	use your version of this file under the terms of the MPL, indicate your
	decision by deleting the provisions above and replace them with the notice
	and other provisions required by the GPL or the LGPL. If you do not delete
	the provisions above, a recipient may use your version of this file under
	the terms of any one of the MPL, the GPL or the LGPL.

	***** END LICENSE BLOCK ***** -->

<!-- SciViews-K's R-session manager dialog box -->

<!DOCTYPE dialog SYSTEM "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" [
<!ENTITY % dialogsDTD SYSTEM "chrome://komodo/locale/dialogs.dtd">
%dialogsDTD;
<!ENTITY % sciviewskDTD SYSTEM "chrome://sciviewsk/locale/sciviewsk.dtd">
%sciviewskDTD;
]>

<?xml-stylesheet href="chrome://global/skin/global.css" type="text/css"?>
<?xml-stylesheet href="chrome://komodo/skin/global/global.css" type="text/css"?>

<dialog id="dialog-svsetsession"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	onload="OnLoad(event)"
	orient="vertical"
	buttons="accept,extra1,cancel"
	buttonlabelextra1="Apply"
	ondialoghelp="return false;"
	ondialogaccept="return OK();"
	ondialogcancel="return true;"
	ondialogextra1="OK();"
	title="R Session manager"
	persist="screenX screenY">
	
	<script type="text/javascript">
		<![CDATA[
		//TODO: Move this code to /content/js/sessions.js
		//TODO
	
		// Create references to main window objects:
		var mainWin, sv, ko;
		var os = Components.classes['@activestate.com/koOs;1']
			.getService(Components.interfaces.koIOs);

		// Populate session directory list,
		// insert preference values into corresponding textboxes
		function OnLoad (event) {
			var p = parent;
			while (p = p.opener) {
				if (!sv && p.sv)	sv = p.sv;
				if (!ko && p.ko)	ko = p.ko;
				if (sv && ko) break;
			}
			mainWin = p;
			var sf = sv.tools.file;


			var lastPlaces = [ko.places.manager.lastHomePlace,
				ko.places.manager.currentPlace]
				.map(sv.tools.file.pathFromURI);

			function hasPrefSetting (name, el) {
				if (!el.hasAttribute("prefsettings")) return(false);
				var prefSettings = el.getAttribute("prefsettings").split(" ");
				return(prefSettings.indexOf(name) != -1);
			}

			var prefEls = document.getElementsByAttribute("pref", "true");
			var prefName, prefVal, prefHomeSubst, prefExistingOnly,
				el, value, values, listContentPref;
			for (var i = 0; i < prefEls.length; i++) {
				el = prefEls[i];
				prefName = el.id;
				prefVal = sv.prefs.getPref(prefName);
				prefHomeSubst = hasPrefSetting("home-subst", el);
				prefExistingOnly = hasPrefSetting("existing-only", el);

				if (prefHomeSubst) prefVal = sf.path(prefVal);

				if (el.tagName == "menulist") {
					listContentPref = el.hasAttribute("contentpref") ?
						el.getAttribute("contentpref") : prefName + ".mru";
				
					values = sv.prefs.getPref(listContentPref, "").split(os.pathsep);
					if (hasPrefSetting('add-recent', el))
						values = Array.concat(lastPlaces, values);

					if (values) {
						var k = values.indexOf(prefHomeSubst ? homeSubst(prefVal) : prefVal);
						// Move current value onto top of list:
						if (k != -1) values.splice(k, 1);
						values = Array.concat(prefVal, values).filter(function(x) x != '');
						values = values.map(function (x) sf.path(x));
						if (prefExistingOnly)
							values = values.filter(function (x)
								sf.exists(x) == sf.TYPE_DIRECTORY);
						values = sv.tools.array.unique(values);

						if (values.length > 10)	values.splice(10);

						values.forEach(function (value)
							el.insertItemAt(value, value, value, null));
					}
				} else if (el.tagName == "checkbox") {
					el.checked = (prefVal == "true");
				}
				el.value = prefVal;
			}
			selectSessionDir();
		}

		// Save values as preferences
		function OK () {
			var el = document.getElementById("sciviews.session.dir");
			var newDir = el.value;
			var mi, values = [];
			for (var j = 0; j < el.itemCount; j++) {
				values.push(homeSubst(el.getItemAtIndex(j).value));
			}
			sv.prefs.setPref("sciviews.session.dir.mru", values.join(os.pathsep));

			var prefEls = document.getElementsByAttribute("pref", "true");
			var prefName, prefVal, el;
			var prefAll = {};
			for (var i = 0; i < prefEls.length; i++) {
				el = prefEls[i];
				prefVal = el.value;
				if (el.getAttribute("prefsettings").indexOf("home-subst") != -1)
					prefVal = homeSubst(prefVal);
				prefAll[el.id] = prefVal;
			}

		var saveOld = document.getElementById("sciviews.session.saveold").checked;
		sv.r.setSession(prefAll["sciviews.session.dir"],
			prefAll["sciviews.session.data"],
			prefAll["sciviews.session.scripts"],
			prefAll["sciviews.session.reports"], saveOld);

		for (i in prefAll) sv.prefs.setPref(i, prefAll[i]);

		var setPlacesRoot =
			document.getElementById("sciviews.session.placesroot").checked;

		if (setPlacesRoot &&
			(sv.tools.file.pathFromURI(ko.places.manager.currentPlace) != newDir))
				ko.places.manager.openDirectory(newDir);

			sv.prefs.setPref("sciviews.session.placesroot", setPlacesRoot);

			return(true);
		}

		// Substitute real home path for "~"
		// use sv.tools.file.path for opposite action
		function homeSubst (dir) {
			var homeMacro = "~";
			var homedir = sv.tools.file.path(homeMacro);
			dir = os.path.normpath(dir);
			var platform = navigator.platform.substring(0,3).toLowerCase();

			if ((platform == "win"
				&& dir.substr(0, homedir.length).toLowerCase() == homedir.toLowerCase())
				|| dir.substr(0, homedir.length) == homedir) {
				dir = homeMacro + dir.substr(homedir.length);
			}
			return(dir);
		}

		// Add a directory item into list
		function setDir (id, relId) {
			var el = document.getElementById(id);
			var dir = ko.filepicker.getFolder(el.value,
				"Choose directory for: " + id);
			var baseDir;
			if (relId) {
				baseDir = document.getElementById(relId).value;
				if (baseDir)
					dir = os.path.relpath(dir, os.normpath(baseDir));
			}
			if (!dir) return(false);

			var mi;
			for (var j = 0; j < el.itemCount; j++) {
				if (el.getItemAtIndex(j).value == dir) {
					el.removeItemAt(j);
					break;
				}
			}
			el.insertItemAt(0, dir, dir, null);
			el.value = dir;
			selectSessionDir();
			return(true);
		}

		function remCurItemFromList () {
			var el = document.getElementById("sciviews.session.dir");
			if (!el.itemCount) return;
			var selInd = el.selectedIndex;
			el.selectedIndex = (selInd + 1) % el.itemCount;
			el.removeItemAt(selInd);
			if (!el.itemCount) el.value = null;
			selectSessionDir();
		}

		function printInfo (str) {
			document.getElementById("info").value = str;
		}
		
		// Select current session directory and read config files,
		// check for existing workspace
		function selectSessionDir (noReadConfig) {
			var dir = document.getElementById("sciviews.session.dir").value;
			var cfgFile = sv.tools.file.path(dir, ".svData");
			// Look if this directory already exists and contains a .svData file
			var config = {};
			var hasConfig, hasWorkspace = false;

			hasConfig = sv.tools.file.exists(dir) == 2 &&
				sv.tools.file.exists(cfgFile) == 1;
			hasWorkspace = sv.tools.file.exists(sv.tools.file.path(dir, ".RData"));
		
			if (!noReadConfig) {
				if (hasConfig) {
					var key, value, cfgName, cfgValue, cfgEls;
					hasConfig = true;
		
					var cfg = sv.tools.file.read(cfgFile, "utf-8").split(/\r?\n+/);
					for (var i in cfg) {
						key = cfg[i].split(/\s*=\s*/);
						config[key[0]] = key[1];
					}
				}

				cfgEls = document.getElementsByAttribute("config", "*");
				for (var i= 0; i < cfgEls.length; i++) {
					cfgName = cfgEls[i].getAttribute("config");
					if (config.hasOwnProperty(cfgName)) {
						cfgEls[i].value = config[cfgName];
					} else {
						cfgEls[i].value = sv.prefs.getPref(cfgEls[i].id);
					}
				}
			}

			printInfo("This directory contains " +
				(hasConfig? "a config file" : "no config file") +
				" (\".svConfig\") and " +
				(hasWorkspace? "saved workspace": "no workspace") + ".");

			document.getElementById("delete-config-button").disabled = !hasConfig;
			document.getElementById("delete-workspace-button").disabled =
				!hasWorkspace;
		}

		// Save configuration files
		function saveConfig () {
			var el = document.getElementById("sciviews.session.dir");
			var dir = el.value;
			var cfg = [];
			var cfgEls = document.getElementsByAttribute("config", "*");
			for (var i= 0; i < cfgEls.length; i++) {
				cfg.push(cfgEls[i].getAttribute("config") + " = " +
					sv.tools.strings.trim(cfgEls[i].value));
			}
			var cfgFile = sv.tools.file.path(dir, ".svData");
			sv.tools.file.write(cfgFile, cfg.join("\n"), "utf-8");

			selectSessionDir(true);
			return(false);
		}

		function clearFiles (which) {
			var dir = document.getElementById("sciviews.session.dir").value;
			var files;
			switch (which) {
			 case "config":
				files = [".svData"];
				break;
			 case "workspace":
				files = [".RData", ".Rhistory"];
				break;
			 default:
			}

			var file;
			for (i in files) {
				try {
					file = sv.tools.file.getfile(dir, files[i]);
					file.remove(true);
				} catch(e) {
					printInfo("Cannot remove file: " + e);
				}
			}
			selectSessionDir();
			return(false);
		}

		function saveWorkspace () {
			//TODO: if R is not running copy .RData file to "dir"
			if (!sv.r.running) return;

			var sf = sv.tools.file;
			var addslashes = sv.tools.strings.addslashes;
			var dir = sf.path(document.getElementById("sciviews.session.dir").value);

			var rDataFile = sf.path(dir, ".RData");
			var rHistoryFile = sf.path(dir, ".Rhistory");
			if (!sf.exists(rDataFile) || ko.dialogs.okCancel(
				sv.translate("Do you really want to overwrite exising workspace file"
				+ "in \"%S\" with current workspace?", dir),
				"Cancel", null, sv.translate("Save current workspace")
				) == "OK") {
				sv.r.evalCallback('save.image("' + addslashes(rDataFile) + '")',
					selectSessionDir);

				if (!sf.exists(rHistoryFile) || ko.dialogs.okCancel(
					sv.translate("Do you want to overwrite current history file in \"%S\"",
					dir), "Cancel", null, sv.translate("Save current history")
					) == "OK") {
					sv.r.evalHidden('savehistory("' + addslashes(rHistoryFile) + '")');
				}
			}
		}
	]]>
	</script>

	<vbox>
		<!--<description>Session directory is: TODO description here</description>-->
		<groupbox orient="vertical">
			<caption label="Session directory:"/>
			<vbox>
				<hbox align="center">
					<menulist id="sciviews.session.dir" oncommand="selectSessionDir();"
						pref="true" prefattribute="value" flex="1"
						prefsettings="dir existing-only home-subst">
						<menupopup/>
					</menulist>
					<button label="Browse..."
						oncommand="setDir('sciviews.session.dir');"/>
					<button label="Remove"
						oncommand="remCurItemFromList('sciviews.session.dir');"/>
				</hbox>
				<hbox align="center">
					<checkbox id="sciviews.session.placesroot" pref="true"
						label="Set this directory as root in &quot;Places&quot;"/>
					<checkbox id="sciviews.session.saveold" pref="true"
						label="Save old workspace"/>
				</hbox>
				<separator class="thin"/>
				<label id="info" value="" />
				<separator class="groove"/>
				<label value="Subdirectories (relative to session dir)"/>
				<hbox align="center">
					<label value="Data:" control="sciviews.session.data" />
					<textbox id="sciviews.session.data" config="datadir" pref="true"
						editable="false" flex="1"/>
					<label value="Scripts:" control="sciviews.session.scripts" />
					<textbox id="sciviews.session.scripts" config="scriptdir"
						pref="true" flex="1"/>
					<label value="Reports:" control="sciviews.session.reports" />
					<textbox id="sciviews.session.reports" config="reportdir"
						pref="true" flex="1"/>
				</hbox>
				<vbox align="right">
					<hbox align="center">
						<button id="save-config-button"
							label="Save config"
							oncommand="saveConfig();"/>
						<button id="delete-config-button"
							label="Delete config"
							oncommand="clearFiles('config');"/>
						<button id="delete-workspace-button"
							label="Delete R workspace"
							oncommand="clearFiles('workspace');"/>
						<button id="delete-workspace-button"
							label="Save current workspace here"
							oncommand="saveWorkspace();"/>
					</hbox>
				</vbox>
			</vbox>
		</groupbox>
	</vbox>
</dialog>
